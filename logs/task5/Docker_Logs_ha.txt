-------------------------Before S1 and S2 started----------------
root@129ef5850b59:/usr/local/etc/haproxy# cat haproxy.cfg
# Global configuration for HAProxy
# http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#3
global
    # Bind UNIX socket to get various stats
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#stats
    stats socket /var/run/haproxy.sock mode 600 level admin

    # Bind TCP port to get various stats
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#stats
    stats socket ipv4@0.0.0.0:9999 level admin

    # Define the timeout on the stats
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#3.1-stats%20timeout
    stats timeout 30s

    # Configure the way the logging is done
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#log
    log 127.0.0.1 local1 notice

# Configure defaults for all the proxies configuration (applied for all the next sections in the configuration)
# http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4
defaults
    # Enable logging
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-log
    log     global

    # The default mode for all the services
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-bind
    mode    http

    # Enable the logging of HTTP requests
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-option%20httplog
    option  httplog

    # Enable the logging of null connections
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-option%20dontlognull
    option  dontlognull

    # Configure the timeout to connect to a server
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-timeout%20connect
    timeout connect 5000

    # Configure the timeout before cutting the connection of a client
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-timeout%20client
    timeout client  50000

    # Same kind of configuration for the servers side
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-timeout%20server
    timeout server  50000

# Open the metrics HAProxy page on the port 1936 on any network interface on the host
# http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4
listen stats *:1936
    # Enable HAProxy to serve stats about himself and the nodes
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-stats%20enable
    stats enable

    # Define the URI to access the stats
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-stats%20uri
    stats uri /

    # Avoid leaking more info than necessary with hiding the version of HAProxy
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-stats%20hide-version
    stats hide-version

# Define the frontend configuration. In fact, that's the part that configure how HAProxy will handle
# the requests from the outside world:
# http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4
frontend localnodes
    # Bind the port 80 to listen incoming outside connections (from the outside world)
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-bind
    bind *:80

    # Define which protocol is enabled on the binded ports.
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-mode
    mode http

    # Use the backend configuration references by the backend name section in this configuration
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-default_backend
    default_backend nodes

# Define the backend configuration. In fact, that's the part that configure what is not directly
# accessible from the outside of the network.
# http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4
backend nodes
    # Define the protocol accepted
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-mode
    mode http

    # Define the way the backend nodes are checked to know if they are alive or down
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-option%20httpchk
    option httpchk HEAD /

    # Define the balancing policy
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#balance
    balance roundrobin

    # Automatically add the X-Forwarded-For header
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-option%20forwardfor
    # https://en.wikipedia.org/wiki/X-Forwarded-For
    option forwardfor

    # With this config, we add the header X-Forwarded-Port
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-http-request
    http-request set-header X-Forwarded-Port %[dst_port]

    # Define the list of nodes to be in the balancing mechanism
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-server
    # HANDLEBARS START
    # HANDLEBARS END

# Other links you will need later for this lab
#
# About cookies: http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-cookie

------------------------After S1 started ----------------------------------
root@129ef5850b59:/usr/local/etc/haproxy# cat haproxy.cfg
# Global configuration for HAProxy
# http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#3
global
    # Bind UNIX socket to get various stats
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#stats
    stats socket /var/run/haproxy.sock mode 600 level admin

    # Bind TCP port to get various stats
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#stats
    stats socket ipv4@0.0.0.0:9999 level admin

    # Define the timeout on the stats
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#3.1-stats%20timeout
    stats timeout 30s

    # Configure the way the logging is done
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#log
    log 127.0.0.1 local1 notice

# Configure defaults for all the proxies configuration (applied for all the next sections in the configuration)
# http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4
defaults
    # Enable logging
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-log
    log     global

    # The default mode for all the services
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-bind
    mode    http

    # Enable the logging of HTTP requests
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-option%20httplog
    option  httplog

    # Enable the logging of null connections
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-option%20dontlognull
    option  dontlognull

    # Configure the timeout to connect to a server
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-timeout%20connect
    timeout connect 5000

    # Configure the timeout before cutting the connection of a client
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-timeout%20client
    timeout client  50000

    # Same kind of configuration for the servers side
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-timeout%20server
    timeout server  50000

# Open the metrics HAProxy page on the port 1936 on any network interface on the host
# http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4
listen stats *:1936
    # Enable HAProxy to serve stats about himself and the nodes
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-stats%20enable
    stats enable

    # Define the URI to access the stats
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-stats%20uri
    stats uri /

    # Avoid leaking more info than necessary with hiding the version of HAProxy
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-stats%20hide-version
    stats hide-version

# Define the frontend configuration. In fact, that's the part that configure how HAProxy will handle
# the requests from the outside world:
# http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4
frontend localnodes
    # Bind the port 80 to listen incoming outside connections (from the outside world)
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-bind
    bind *:80

    # Define which protocol is enabled on the binded ports.
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-mode
    mode http

    # Use the backend configuration references by the backend name section in this configuration
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-default_backend
    default_backend nodes

# Define the backend configuration. In fact, that's the part that configure what is not directly
# accessible from the outside of the network.
# http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4
backend nodes
    # Define the protocol accepted
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-mode
    mode http

    # Define the way the backend nodes are checked to know if they are alive or down
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-option%20httpchk
    option httpchk HEAD /

    # Define the balancing policy
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#balance
    balance roundrobin

    # Automatically add the X-Forwarded-For header
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-option%20forwardfor
    # https://en.wikipedia.org/wiki/X-Forwarded-For
    option forwardfor

    # With this config, we add the header X-Forwarded-Port
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-http-request
    http-request set-header X-Forwarded-Port %[dst_port]

    # Define the list of nodes to be in the balancing mechanism
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-server
    # HANDLEBARS START

    server ba951c082555 172.18.0.3:3000 check

    # HANDLEBARS END

# Other links you will need later for this lab
#
# About cookies: http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-cookie

-----------------------------After s1 and S2 started-------------------
root@129ef5850b59:/usr/local/etc/haproxy# cat haproxy.cfg
# Global configuration for HAProxy
# http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#3
global
    # Bind UNIX socket to get various stats
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#stats
    stats socket /var/run/haproxy.sock mode 600 level admin

    # Bind TCP port to get various stats
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#stats
    stats socket ipv4@0.0.0.0:9999 level admin

    # Define the timeout on the stats
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#3.1-stats%20timeout
    stats timeout 30s

    # Configure the way the logging is done
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#log
    log 127.0.0.1 local1 notice

# Configure defaults for all the proxies configuration (applied for all the next sections in the configuration)
# http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4
defaults
    # Enable logging
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-log
    log     global

    # The default mode for all the services
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-bind
    mode    http

    # Enable the logging of HTTP requests
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-option%20httplog
    option  httplog

    # Enable the logging of null connections
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-option%20dontlognull
    option  dontlognull

    # Configure the timeout to connect to a server
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-timeout%20connect
    timeout connect 5000

    # Configure the timeout before cutting the connection of a client
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-timeout%20client
    timeout client  50000

    # Same kind of configuration for the servers side
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-timeout%20server
    timeout server  50000

# Open the metrics HAProxy page on the port 1936 on any network interface on the host
# http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4
listen stats *:1936
    # Enable HAProxy to serve stats about himself and the nodes
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-stats%20enable
    stats enable

    # Define the URI to access the stats
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-stats%20uri
    stats uri /

    # Avoid leaking more info than necessary with hiding the version of HAProxy
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-stats%20hide-version
    stats hide-version

# Define the frontend configuration. In fact, that's the part that configure how HAProxy will handle
# the requests from the outside world:
# http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4
frontend localnodes
    # Bind the port 80 to listen incoming outside connections (from the outside world)
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-bind
    bind *:80

    # Define which protocol is enabled on the binded ports.
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-mode
    mode http

    # Use the backend configuration references by the backend name section in this configuration
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-default_backend
    default_backend nodes

# Define the backend configuration. In fact, that's the part that configure what is not directly
# accessible from the outside of the network.
# http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4
backend nodes
    # Define the protocol accepted
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-mode
    mode http

    # Define the way the backend nodes are checked to know if they are alive or down
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-option%20httpchk
    option httpchk HEAD /

    # Define the balancing policy
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#balance
    balance roundrobin

    # Automatically add the X-Forwarded-For header
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-option%20forwardfor
    # https://en.wikipedia.org/wiki/X-Forwarded-For
    option forwardfor

    # With this config, we add the header X-Forwarded-Port
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-http-request
    http-request set-header X-Forwarded-Port %[dst_port]

    # Define the list of nodes to be in the balancing mechanism
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-server
    # HANDLEBARS START

    server 6e0e3abc9c94 172.18.0.4:3000 check

    server ba951c082555 172.18.0.3:3000 check

    # HANDLEBARS END

# Other links you will need later for this lab
#
# About cookies: http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-cookie

-----------------------DOCKER PS--------------------------
vagrant@ubuntu-14:/vagrant/ha$ docker ps
CONTAINER ID        IMAGE                  COMMAND             CREATED             STATUS              PORTS                                                                                    NAMES
6e0e3abc9c94        softengheigvd/webapp   "/init"             13 minutes ago      Up 13 minutes       3000/tcp, 7373/tcp, 7946/tcp                                                             s2
ba951c082555        softengheigvd/webapp   "/init"             15 minutes ago      Up 15 minutes       3000/tcp, 7373/tcp, 7946/tcp                                                             s1
129ef5850b59        softengheigvd/ha       "/init"             30 minutes ago      Up 30 minutes       0.0.0.0:80->80/tcp, 7373/tcp, 0.0.0.0:1936->1936/tcp, 0.0.0.0:9999->9999/tcp, 7946/tcp   ha

------------------------DOCKER INSPECT HA-----------------------------------
vagrant@ubuntu-14:/vagrant/ha$ docker inspect ha
[
    {
        "Id": "129ef5850b59617c99b05a8e9ef3ed126ba4dd66acb10069656242f5bc340f1f",
        "Created": "2016-12-16T09:41:12.772314863Z",
        "Path": "/init",
        "Args": [],
        "State": {
            "Status": "running",
            "Running": true,
            "Paused": false,
            "Restarting": false,
            "OOMKilled": false,
            "Dead": false,
            "Pid": 12739,
            "ExitCode": 0,
            "Error": "",
            "StartedAt": "2016-12-16T09:41:13.495855706Z",
            "FinishedAt": "0001-01-01T00:00:00Z"
        },
        "Image": "sha256:da07d15375fa44ac007f8433abfa92b5f48ed9a2bed43b549bbb705cbf769372",
        "ResolvConfPath": "/var/lib/docker/containers/129ef5850b59617c99b05a8e9ef3ed126ba4dd66acb10069656242f5bc340f1f/resolv.conf",
        "HostnamePath": "/var/lib/docker/containers/129ef5850b59617c99b05a8e9ef3ed126ba4dd66acb10069656242f5bc340f1f/hostname",
        "HostsPath": "/var/lib/docker/containers/129ef5850b59617c99b05a8e9ef3ed126ba4dd66acb10069656242f5bc340f1f/hosts",
        "LogPath": "/var/lib/docker/containers/129ef5850b59617c99b05a8e9ef3ed126ba4dd66acb10069656242f5bc340f1f/129ef5850b59617c99b05a8e9ef3ed126ba4dd66acb10069656242f5bc340f1f-json.log",
		"Name": "/ha",
        "RestartCount": 0,
        "Driver": "aufs",
        "MountLabel": "",
        "ProcessLabel": "",
        "AppArmorProfile": "",
        "ExecIDs": null,
        "HostConfig": {
            "Binds": null,
            "ContainerIDFile": "",
            "LogConfig": {
                "Type": "json-file",
                "Config": {}
            },
            "NetworkMode": "heig",
            "PortBindings": {
                "1936/tcp": [
                    {
                        "HostIp": "",
                        "HostPort": "1936"
                    }
                ],
                "80/tcp": [
                    {
                        "HostIp": "",
                        "HostPort": "80"
                    }
                ],
                "9999/tcp": [
                    {
                        "HostIp": "",
                        "HostPort": "9999"
                    }
                ]
            },
            "RestartPolicy": {
                "Name": "no",
                "MaximumRetryCount": 0
            },
            "AutoRemove": false,
            "VolumeDriver": "",
            "VolumesFrom": null,
            "CapAdd": null,
            "CapDrop": null,
            "Dns": [],
            "DnsOptions": [],
            "DnsSearch": [],
            "ExtraHosts": null,
            "GroupAdd": null,
            "IpcMode": "",
            "Cgroup": "",
            "Links": null,
            "OomScoreAdj": 0,
            "PidMode": "",
            "Privileged": false,
            "PublishAllPorts": false,
            "ReadonlyRootfs": false,
            "SecurityOpt": null,
            "UTSMode": "",
            "UsernsMode": "",
            "ShmSize": 67108864,
            "Runtime": "runc",
            "ConsoleSize": [
                0,
                0
            ],
			"Isolation": "",    
            "CpuShares": 0,
            "Memory": 0,
            "CgroupParent": "",
            "BlkioWeight": 0,
            "BlkioWeightDevice": null,
            "BlkioDeviceReadBps": null,
            "BlkioDeviceWriteBps": null,
            "BlkioDeviceReadIOps": null,
            "BlkioDeviceWriteIOps": null,
            "CpuPeriod": 0,
            "CpuQuota": 0,
            "CpusetCpus": "",
            "CpusetMems": "",
            "Devices": [],
            "DiskQuota": 0,
            "KernelMemory": 0,
            "MemoryReservation": 0,
            "MemorySwap": 0,
            "MemorySwappiness": -1,
            "OomKillDisable": false,
            "PidsLimit": 0,
            "Ulimits": null,
            "CpuCount": 0,
            "CpuPercent": 0,
            "IOMaximumIOps": 0,
            "IOMaximumBandwidth": 0
        },
        "GraphDriver": {
            "Name": "aufs",
            "Data": null
        },
        "Mounts": [],
        "Config": {
            "Hostname": "129ef5850b59",
            "Domainname": "",
            "User": "",
            "AttachStdin": false,
            "AttachStdout": false,
            "AttachStderr": false,
            "ExposedPorts": {
                "1936/tcp": {},
                "7373/tcp": {},
                "7946/tcp": {},
                "80/tcp": {},
                "9999/tcp": {}
            },
            "Tty": false,
            "OpenStdin": false,
            "StdinOnce": false,
            "Env": [
                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
                "HAPROXY_MAJOR=1.5",
                "HAPROXY_VERSION=1.5.18",
                "HAPROXY_MD5=21d35f114583ef731bc96af05b46c75a",
                "ROLE=balancer"
            ],
            "Cmd": null,
            "Image": "softengheigvd/ha",
            "Volumes": null,
            "WorkingDir": "",
            "Entrypoint": [
                "/init"
            ],
            "OnBuild": null,
            "Labels": {}
        },

"NetworkSettings": {
            "Bridge": "",
            "SandboxID": "e20660fe3c61ae6b480bea873c8a8d04452b3b3e75fee7324c0c115c7ec30028",
            "HairpinMode": false,
            "LinkLocalIPv6Address": "",
            "LinkLocalIPv6PrefixLen": 0,
            "Ports": {
                "1936/tcp": [
                    {
                        "HostIp": "0.0.0.0",
                        "HostPort": "1936"
                    }
                ],
                "7373/tcp": null,
                "7946/tcp": null,
                "80/tcp": [
                    {
                        "HostIp": "0.0.0.0",
                        "HostPort": "80"
                    }
                ],
                "9999/tcp": [
                    {
                        "HostIp": "0.0.0.0",
                        "HostPort": "9999"
                    }
                ]
            },
            "SandboxKey": "/var/run/docker/netns/e20660fe3c61",
            "SecondaryIPAddresses": null,
            "SecondaryIPv6Addresses": null,
            "EndpointID": "",
            "Gateway": "",
            "GlobalIPv6Address": "",
            "GlobalIPv6PrefixLen": 0,
            "IPAddress": "",
            "IPPrefixLen": 0,
            "IPv6Gateway": "",
            "MacAddress": "",
            "Networks": {
                "heig": {
                    "IPAMConfig": null,
                    "Links": null,
                    "Aliases": [
                        "129ef5850b59"
                    ],
                    "NetworkID": "1eaaab103ed48a6acb3a72f8d70f028c31b1b388ee91573255a3c438303b6f70",
                    "EndpointID": "25d0fbf2d11f6ccff54685b5cfdf905c8d0369f476397ad580b7cdba450e5330",
                    "Gateway": "172.18.0.1",
                    "IPAddress": "172.18.0.2",
                    "IPPrefixLen": 16,
                    "IPv6Gateway": "",
                    "GlobalIPv6Address": "",
                    "GlobalIPv6PrefixLen": 0,
                    "MacAddress": "02:42:ac:12:00:02"
                }
            }
        }
   

------------------------DOCKER INSPECT S1-----------------------------------
vagrant@ubuntu-14:/vagrant/ha$ docker inspect s1
[
    {
        "Id": "ba951c0825552012d2e070505b69c536e6dcb30f57abda3a47c79327ef1bb23d",
        "Created": "2016-12-16T09:56:18.11581442Z",
        "Path": "/init",
        "Args": [],
        "State": {
            "Status": "running",
            "Running": true,
            "Paused": false,
            "Restarting": false,
            "OOMKilled": false,
            "Dead": false,
            "Pid": 13049,
            "ExitCode": 0,
            "Error": "",
            "StartedAt": "2016-12-16T09:56:18.710614137Z",
            "FinishedAt": "0001-01-01T00:00:00Z"
        },
        "Image": "sha256:f1b28b69b927f85e46f4962c428cb63980dbcfb2d526494e9d77d62dcc80bc7f",
        "ResolvConfPath": "/var/lib/docker/containers/ba951c0825552012d2e070505b69c536e6dcb30f57abda3a47c79327ef1bb23d/resolv.conf",
        "HostnamePath": "/var/lib/docker/containers/ba951c0825552012d2e070505b69c536e6dcb30f57abda3a47c79327ef1bb23d/hostname",
        "HostsPath": "/var/lib/docker/containers/ba951c0825552012d2e070505b69c536e6dcb30f57abda3a47c79327ef1bb23d/hosts",
        "LogPath": "/var/lib/docker/containers/ba951c0825552012d2e070505b69c536e6dcb30f57abda3a47c79327ef1bb23d/ba951c0825552012d2e070505b69c536e6dcb30f57abda3a47c79327ef1bb23d-json.log",
        "Name": "/s1",
        "RestartCount": 0,
        "Driver": "aufs",
        "MountLabel": "",
        "ProcessLabel": "",
        "AppArmorProfile": "",
        "ExecIDs": null,
        "HostConfig": {
            "Binds": null,
            "ContainerIDFile": "",
            "LogConfig": {
                "Type": "json-file",
                "Config": {}
            },
            "NetworkMode": "heig",
            "PortBindings": {},
            "RestartPolicy": {
                "Name": "no",
                "MaximumRetryCount": 0
            },
            "AutoRemove": false,
            "VolumeDriver": "",
            "VolumesFrom": null,
            "CapAdd": null,
            "CapDrop": null,
            "Dns": [],

            "DnsOptions": [],
            "DnsSearch": [],
            "ExtraHosts": null,
            "GroupAdd": null,
            "IpcMode": "",
            "Cgroup": "",
            "Links": null,
            "OomScoreAdj": 0,
            "PidMode": "",
            "Privileged": false,
            "PublishAllPorts": false,
            "ReadonlyRootfs": false,
            "SecurityOpt": null,
            "UTSMode": "",
            "UsernsMode": "",
            "ShmSize": 67108864,
            "Runtime": "runc",
            "ConsoleSize": [
                0,
                0
            ],
            "Isolation": "",
            "CpuShares": 0,
            "Memory": 0,
            "CgroupParent": "",
            "BlkioWeight": 0,
            "BlkioWeightDevice": null,
            "BlkioDeviceReadBps": null,
            "BlkioDeviceWriteBps": null,
            "BlkioDeviceReadIOps": null,
            "BlkioDeviceWriteIOps": null,
            "CpuPeriod": 0,
            "CpuQuota": 0,
            "CpusetCpus": "",
            "CpusetMems": "",
            "Devices": [],
            "DiskQuota": 0,
            "KernelMemory": 0,
            "MemoryReservation": 0,
            "MemorySwap": 0,
            "MemorySwappiness": -1,
            "OomKillDisable": false,
            "PidsLimit": 0,
            "Ulimits": null,
            "CpuCount": 0,
            "CpuPercent": 0,
            "IOMaximumIOps": 0,
            "IOMaximumBandwidth": 0
        },
        "GraphDriver": {
            "Name": "aufs",
            "Data": null
        },
        "Mounts": [],
        "Config": {
            "Hostname": "ba951c082555",
            "Domainname": "",
            "User": "",
            "AttachStdin": false,
            "AttachStdout": false,
			"AttachStderr": false,
            "ExposedPorts": {
                "3000/tcp": {},
                "7373/tcp": {},
                "7946/tcp": {}
            },
            "Tty": false,
            "OpenStdin": false,
            "StdinOnce": false,
            "Env": [
                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
                "NODE_VERSION=0.12.2",
                "NPM_VERSION=2.9.1",
                "ROLE=backend"
            ],
            "Cmd": null,
            "Image": "softengheigvd/webapp",
            "Volumes": null,
            "WorkingDir": "",
            "Entrypoint": [
                "/init"
            ],
            "OnBuild": null,
            "Labels": {}
        },
        "NetworkSettings": {
            "Bridge": "",
            "SandboxID": "030afe10cd98e8f9d72134625ad57e489812bc5259568704accfd6cbb4782346",
            "HairpinMode": false,
            "LinkLocalIPv6Address": "",
            "LinkLocalIPv6PrefixLen": 0,
            "Ports": {
                "3000/tcp": null,
                "7373/tcp": null,
                "7946/tcp": null
            },
            "SandboxKey": "/var/run/docker/netns/030afe10cd98",
            "SecondaryIPAddresses": null,
            "SecondaryIPv6Addresses": null,
            "EndpointID": "",
            "Gateway": "",
            "GlobalIPv6Address": "",
            "GlobalIPv6PrefixLen": 0,
            "IPAddress": "",
            "IPPrefixLen": 0,
            "IPv6Gateway": "",
            "MacAddress": "",
            "Networks": {
                "heig": {
                    "IPAMConfig": null,
                    "Links": null,
                    "Aliases": [
                        "ba951c082555"
                    ],
                    "NetworkID": "1eaaab103ed48a6acb3a72f8d70f028c31b1b388ee91573255a3c438303b6f70",
                    "EndpointID": "2caee52b7414b39b9c602b242ae6ef8ac79f99bb93bdf7208ec5d17538fc130b",
                    "Gateway": "172.18.0.1",
                    "IPAddress": "172.18.0.3",
                    "IPPrefixLen": 16,
                    "IPv6Gateway": "",
                    "GlobalIPv6Address": "",
                    "GlobalIPv6PrefixLen": 0,
                    "MacAddress": "02:42:ac:12:00:03"
                }
            }
        }
    }
]

------------------------DOCKER INSPECT S2-----------------------------------
vagrant@ubuntu-14:/vagrant/ha$ docker inspect s2
[
    {
        "Id": "6e0e3abc9c944e0c8390dc203697a22e216d5fec81dea26a810fb3a1b9af9813",
        "Created": "2016-12-16T09:57:57.728586501Z",
        "Path": "/init",
        "Args": [],
        "State": {
            "Status": "running",
            "Running": true,
            "Paused": false,
            "Restarting": false,
            "OOMKilled": false,
            "Dead": false,
            "Pid": 13341,
            "ExitCode": 0,
            "Error": "",
            "StartedAt": "2016-12-16T09:57:58.28129258Z",
            "FinishedAt": "0001-01-01T00:00:00Z"
        },
        "Image": "sha256:f1b28b69b927f85e46f4962c428cb63980dbcfb2d526494e9d77d62dcc80bc7f",
        "ResolvConfPath": "/var/lib/docker/containers/6e0e3abc9c944e0c8390dc203697a22e216d5fec81dea26a810fb3a1b9af9813/resolv.conf",
        "HostnamePath": "/var/lib/docker/containers/6e0e3abc9c944e0c8390dc203697a22e216d5fec81dea26a810fb3a1b9af9813/hostname",
        "HostsPath": "/var/lib/docker/containers/6e0e3abc9c944e0c8390dc203697a22e216d5fec81dea26a810fb3a1b9af9813/hosts",
        "LogPath": "/var/lib/docker/containers/6e0e3abc9c944e0c8390dc203697a22e216d5fec81dea26a810fb3a1b9af9813/6e0e3abc9c944e0c8390dc203697a22e216d5fec81dea26a810fb3a1b9af9813-json.log",
        "Name": "/s2",
        "RestartCount": 0,
        "Driver": "aufs",
        "MountLabel": "",
        "ProcessLabel": "",
        "AppArmorProfile": "",
        "ExecIDs": null,
        "HostConfig": {
            "Binds": null,
            "ContainerIDFile": "",
            "LogConfig": {
                "Type": "json-file",
                "Config": {}
            },
            "NetworkMode": "heig",
            "PortBindings": {},
            "RestartPolicy": {
                "Name": "no",
                "MaximumRetryCount": 0
            },
            "AutoRemove": false,
            "VolumeDriver": "",
            "VolumesFrom": null,
            "CapAdd": null,
            "CapDrop": null,
            "Dns": [],
            "DnsOptions": [],
            "DnsSearch": [],
            "ExtraHosts": null,
            "GroupAdd": null,
            "IpcMode": "",
            "Cgroup": "",
            "Links": null,
            "OomScoreAdj": 0,
            "PidMode": "",
            "Privileged": false,
            "PublishAllPorts": false,
            "ReadonlyRootfs": false,
            "SecurityOpt": null,
            "UTSMode": "",
            "UsernsMode": "",
            "ShmSize": 67108864,
            "Runtime": "runc",
            "ConsoleSize": [
                0,
                0
            ],
            "Isolation": "",
            "CpuShares": 0,
            "Memory": 0,
            "CgroupParent": "",
            "BlkioWeight": 0,
            "BlkioWeightDevice": null,
            "BlkioDeviceReadBps": null,
            "BlkioDeviceWriteBps": null,
            "BlkioDeviceReadIOps": null,
            "BlkioDeviceWriteIOps": null,
            "CpuPeriod": 0,
            "CpuQuota": 0,
            "CpusetCpus": "",
            "CpusetMems": "",
            "Devices": [],
            "DiskQuota": 0,
            "KernelMemory": 0,
            "MemoryReservation": 0,
            "MemorySwap": 0,
            "MemorySwappiness": -1,
            "OomKillDisable": false,
            "PidsLimit": 0,
            "Ulimits": null,
            "CpuCount": 0,
            "CpuPercent": 0,
            "IOMaximumIOps": 0,
            "IOMaximumBandwidth": 0
        },
        "GraphDriver": {
            "Name": "aufs",
            "Data": null
        },
        "Mounts": [],
        "Config": {
            "Hostname": "6e0e3abc9c94",
            "Domainname": "",
            "User": "",
            "AttachStdin": false,
            "AttachStdout": false,
            "AttachStderr": false,
            "ExposedPorts": {
                "3000/tcp": {},
                "7373/tcp": {},
                "7946/tcp": {}
            },
            "Tty": false,
            "OpenStdin": false,
            "StdinOnce": false,
            "Env": [
                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
                "NODE_VERSION=0.12.2",
                "NPM_VERSION=2.9.1",
                "ROLE=backend"
            ],
            "Cmd": null,
            "Image": "softengheigvd/webapp",
            "Volumes": null,
            "WorkingDir": "",
            "Entrypoint": [
                "/init"
            ],
            "OnBuild": null,
            "Labels": {}
        },
        "NetworkSettings": {
            "Bridge": "",
            "SandboxID": "e3d836589968af5248d6647bf32b529c24e68369c61ede223a6640b91a7ad32e",
            "HairpinMode": false,
            "LinkLocalIPv6Address": "",
            "LinkLocalIPv6PrefixLen": 0,
            "Ports": {
                "3000/tcp": null,
                "7373/tcp": null,
                "7946/tcp": null
            },
            "SandboxKey": "/var/run/docker/netns/e3d836589968",
            "SecondaryIPAddresses": null,
            "SecondaryIPv6Addresses": null,
            "EndpointID": "",
            "Gateway": "",
            "GlobalIPv6Address": "",
            "GlobalIPv6PrefixLen": 0,
            "IPAddress": "",
            "IPPrefixLen": 0,
            "IPv6Gateway": "",
            "MacAddress": "",
            "Networks": {
                "heig": {
                    "IPAMConfig": null,
                    "Links": null,
                    "Aliases": [
                        "6e0e3abc9c94"
                    ],
                    "NetworkID": "1eaaab103ed48a6acb3a72f8d70f028c31b1b388ee91573255a3c438303b6f70",
                    "EndpointID": "e764269a1a10f68e3f8d05be41cecddd90c847df4085376115b7b5741ae07b9f",
                    "Gateway": "172.18.0.1",
                    "IPAddress": "172.18.0.4",
                    "IPPrefixLen": 16,
                    "IPv6Gateway": "",
                    "GlobalIPv6Address": "",
                    "GlobalIPv6PrefixLen": 0,
                    "MacAddress": "02:42:ac:12:00:04"
                }
            }
        }
    }
]

-------------------------------------Docker LOGS HA ------------------------------------------
vagrant@ubuntu-14:/vagrant/ha$ docker logs ha
[s6-init] making user provided files available at /var/run/s6/etc...exited 0.
[s6-init] ensuring user provided files have correct perms...exited 0.
[fix-attrs.d] applying ownership & permissions fixes...
[fix-attrs.d] done.
[cont-init.d] executing container initialization scripts...
[cont-init.d] done.
[services.d] starting services
[services.d] done.
/opt/bin/serf agent --join ha --replay --event-handler member-join=/serf-handlers/member-join.sh --event-handler member-leave,member-failed=/serf-handlers/member-leave.sh --tag role=balancer
==> Starting Serf agent...
==> Starting Serf agent RPC...
==> Serf agent running!
         Node name: '129ef5850b59'
         Bind addr: '0.0.0.0:7946'
          RPC addr: '127.0.0.1:7373'
         Encrypted: false
          Snapshot: false
           Profile: lan
==> Joining cluster...(replay: true)
    Join completed. Synced with 1 initial agents

==> Log data will now stream in as it occurs:

    2016/12/16 09:41:13 [INFO] agent: Serf agent starting
    2016/12/16 09:41:13 [INFO] serf: EventMemberJoin: 129ef5850b59 172.18.0.2
    2016/12/16 09:41:13 [INFO] agent: joining: [ha] replay: true
    2016/12/16 09:41:14 [INFO] agent: Received event: member-join
    2016/12/16 09:41:23 [INFO] agent: joined: 1 nodes
    2016/12/16 09:56:28 [INFO] serf: EventMemberJoin: ba951c082555 172.18.0.3
    2016/12/16 09:56:29 [INFO] agent: Received event: member-join
    2016/12/16 09:58:08 [INFO] serf: EventMemberJoin: 6e0e3abc9c94 172.18.0.4
    2016/12/16 09:58:09 [INFO] agent: Received event: member-join

-------------------------------------Docker LOGS S1 ------------------------------------------
vagrant@ubuntu-14:/vagrant/ha$ docker logs s1
[s6-init] making user provided files available at /var/run/s6/etc...exited 0.
[s6-init] ensuring user provided files have correct perms...exited 0.
[fix-attrs.d] applying ownership & permissions fixes...
[fix-attrs.d] done.
[cont-init.d] executing container initialization scripts...
[cont-init.d] done.
[services.d] starting services
[services.d] done.
/opt/bin/serf agent --join ha --tag role=backend
==> Starting Serf agent...
==> Starting Serf agent RPC...
==> Serf agent running!
         Node name: 'ba951c082555'
         Bind addr: '0.0.0.0:7946'
          RPC addr: '127.0.0.1:7373'
         Encrypted: false
          Snapshot: false
           Profile: lan
==> Joining cluster...(replay: false)
Application started
    Join completed. Synced with 1 initial agents

==> Log data will now stream in as it occurs:

    2016/12/16 09:56:18 [INFO] agent: Serf agent starting
    2016/12/16 09:56:18 [INFO] serf: EventMemberJoin: ba951c082555 172.18.0.3
    2016/12/16 09:56:18 [INFO] agent: joining: [ha] replay: false
    2016/12/16 09:56:19 [INFO] agent: Received event: member-join
    2016/12/16 09:56:28 [INFO] serf: EventMemberJoin: 129ef5850b59 172.18.0.2
    2016/12/16 09:56:28 [INFO] agent: joined: 1 nodes
    2016/12/16 09:56:29 [INFO] agent: Received event: member-join
    2016/12/16 09:58:08 [INFO] serf: EventMemberJoin: 6e0e3abc9c94 172.18.0.4
    2016/12/16 09:58:09 [INFO] agent: Received event: member-join

-------------------------------------Docker LOGS S2 ------------------------------------------
vagrant@ubuntu-14:/vagrant/ha$ docker logs s2
[s6-init] making user provided files available at /var/run/s6/etc...exited 0.
[s6-init] ensuring user provided files have correct perms...exited 0.
[fix-attrs.d] applying ownership & permissions fixes...
[fix-attrs.d] done.
[cont-init.d] executing container initialization scripts...
[cont-init.d] done.
[services.d] starting services
[services.d] done.
/opt/bin/serf agent --join ha --tag role=backend
==> Starting Serf agent...
==> Starting Serf agent RPC...
==> Serf agent running!
         Node name: '6e0e3abc9c94'
         Bind addr: '0.0.0.0:7946'
          RPC addr: '127.0.0.1:7373'
         Encrypted: false
          Snapshot: false
           Profile: lan
==> Joining cluster...(replay: false)
Application started
    Join completed. Synced with 1 initial agents

==> Log data will now stream in as it occurs:

    2016/12/16 09:57:58 [INFO] agent: Serf agent starting
    2016/12/16 09:57:58 [INFO] serf: EventMemberJoin: 6e0e3abc9c94 172.18.0.4
    2016/12/16 09:57:58 [INFO] agent: joining: [ha] replay: false
    2016/12/16 09:57:59 [INFO] agent: Received event: member-join
    2016/12/16 09:58:08 [INFO] serf: EventMemberJoin: 129ef5850b59 172.18.0.2
    2016/12/16 09:58:08 [INFO] serf: EventMemberJoin: ba951c082555 172.18.0.3
    2016/12/16 09:58:08 [INFO] agent: joined: 1 nodes
    2016/12/16 09:58:09 [INFO] agent: Received event: member-join

--------------------------------------------------- List of registred nodes ---------------------------------------------
root@129ef5850b59:/nodes# ls -l
total 8
-rw-r--r-- 1 root root 24 Dec 16 09:58 6e0e3abc9c94
-rw-r--r-- 1 root root 24 Dec 16 09:56 ba951c082555

---------------------------------------------------- HA CFG (Without S1) ------------------------------------------------
root@129ef5850b59:/usr/local/etc/haproxy# cat haproxy.cfg
# Global configuration for HAProxy
# http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#3
global
    # Bind UNIX socket to get various stats
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#stats
    stats socket /var/run/haproxy.sock mode 600 level admin

    # Bind TCP port to get various stats
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#stats
    stats socket ipv4@0.0.0.0:9999 level admin

    # Define the timeout on the stats
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#3.1-stats%20timeout
    stats timeout 30s

    # Configure the way the logging is done
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#log
    log 127.0.0.1 local1 notice

# Configure defaults for all the proxies configuration (applied for all the next sections in the configuration)
# http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4
defaults
    # Enable logging
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-log
    log     global

    # The default mode for all the services
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-bind
    mode    http

    # Enable the logging of HTTP requests
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-option%20httplog
    option  httplog

    # Enable the logging of null connections
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-option%20dontlognull
    option  dontlognull

    # Configure the timeout to connect to a server
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-timeout%20connect
    timeout connect 5000

    # Configure the timeout before cutting the connection of a client
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-timeout%20client
    timeout client  50000

    # Same kind of configuration for the servers side
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-timeout%20server
    timeout server  50000

# Open the metrics HAProxy page on the port 1936 on any network interface on the host
# http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4
listen stats *:1936
    # Enable HAProxy to serve stats about himself and the nodes
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-stats%20enable
    stats enable

    # Define the URI to access the stats
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-stats%20uri
    stats uri /

    # Avoid leaking more info than necessary with hiding the version of HAProxy
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-stats%20hide-version
    stats hide-version

# Define the frontend configuration. In fact, that's the part that configure how HAProxy will handle
# the requests from the outside world:
# http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4
frontend localnodes
    # Bind the port 80 to listen incoming outside connections (from the outside world)
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-bind
    bind *:80

    # Define which protocol is enabled on the binded ports.
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-mode
    mode http

    # Use the backend configuration references by the backend name section in this configuration
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-default_backend
    default_backend nodes

# Define the backend configuration. In fact, that's the part that configure what is not directly
# accessible from the outside of the network.
# http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4
backend nodes
    # Define the protocol accepted
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-mode
    mode http

    # Define the way the backend nodes are checked to know if they are alive or down
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-option%20httpchk
    option httpchk HEAD /

    # Define the balancing policy
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#balance
    balance roundrobin

    # Automatically add the X-Forwarded-For header
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-option%20forwardfor
    # https://en.wikipedia.org/wiki/X-Forwarded-For
    option forwardfor

    # With this config, we add the header X-Forwarded-Port
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-http-request
    http-request set-header X-Forwarded-Port %[dst_port]

    # Define the list of nodes to be in the balancing mechanism
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-server
    # HANDLEBARS START

    server 6e0e3abc9c94 172.18.0.4:3000 check

    # HANDLEBARS END

# Other links you will need later for this lab
#
# About cookies: http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-cookie


---------------------------------------------------- List of registred nodes (Without s1)-----------------------------------
root@129ef5850b59:/nodes# ls -l
total 4
-rw-r--r-- 1 root root 24 Dec 16 09:58 6e0e3abc9c94

------------------------------------------------------- Docker PS (Without S1) -------------------------------------------
vagrant@ubuntu-14:/vagrant/ha$ docker ps
CONTAINER ID        IMAGE                  COMMAND             CREATED             STATUS              PORTS                                                                                    NAMES
6e0e3abc9c94        softengheigvd/webapp   "/init"             29 minutes ago      Up 29 minutes       3000/tcp, 7373/tcp, 7946/tcp                                                             s2
129ef5850b59        softengheigvd/ha       "/init"             46 minutes ago      Up 46 minutes       0.0.0.0:80->80/tcp, 7373/tcp, 0.0.0.0:1936->1936/tcp, 0.0.0.0:9999->9999/tcp, 7946/tcp   ha
